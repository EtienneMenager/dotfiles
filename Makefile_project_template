CC       = clang
OPT      = -O0
MY_FLAGS = 
BUILD_FOLDER = build

CODEDIRS     = . ./src # add more source folders here
INCDIRS      = . ./include # add more include folders here
BINARY       = $(BUILD_FOLDER)/bin # name of the executable

# Generate files that encode make rules for the .h dependencies
DEPFLAGS = -MP -MD
# Automatically add the -I onto each include directory
CFLAGS = -Wall -Wextra $(foreach D,$(INCDIRS),-I$(D)) $(OPT) $(DEPFLAGS)
# If -O0 selected, add debug info
ifneq ($(filter $(OPT), -O0),)
	CFLAGS += -g
endif

# We register each `.c` file in our source directories
CFILES=$(foreach D,$(CODEDIRS),$(wildcard $(D)/*.c))

# Regular expression replacement to handle object files `file.c` -> `file.o`
OBJECTS=$(patsubst ./%.c,%.o,$(CFILES))
BUILD_OBJECTS_FOLDER=$(BUILD_FOLDER)/objectFiles
BUILD_OBJECTS=$(patsubst %.o,$(BUILD_OBJECTS_FOLDER)/%.o,$(OBJECTS))

# Create some `.d` files so that `make` can also track changes in the header files
DEPFILES=$(patsubst %.c,%.d,$(CFILES))
BUILD_DEPFILES=$(patsubst %.d,$(BUILD_OBJECTS_FOLDER)/%.d,$(DEPFILES))

# Create build folder and replicate the project's file structure in it
$(foreach D,$(CODEDIRS),$(shell mkdir -p $(BUILD_OBJECTS_FOLDER)/$(D)))

all: $(BINARY)

$(BINARY): $(BUILD_OBJECTS)
	$(CC) -o $@ $(BUILD_OBJECTS)

# only want the .c file dependency here, thus $< instead of $^.
$(BUILD_OBJECTS_FOLDER)/%.o: %.c
	$(CC) $(CFLAGS) -c -o $@ $<

clean:
	rm -rfv $(BINARY) $(BUILD_OBJECTS) $(BUILD_DEPFILES) $(BUILD_OBJECTS_FOLDER)

# shell commands are a set of keystrokes away
distribute: clean
	tar zcvf dist.tgz *

# @ silences the printing of the command
# $(info ...) prints output
diff:
	$(info The status of the repository, and the volume of per-file changes:)
	@git status
	@git diff --stat

# include the dependencies
-include $(DEPFILES)

# add .PHONY so that the non-targetfile - rules work even if a file with the same name exists.
.PHONY: all clean distribute diff
