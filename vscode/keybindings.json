// Place your key bindings in this file to override the defaultsauto[]
[
    {
        "key": "cmd+k cmd+enter",
        "command": "notifications.clearAll"
    },
    {
        "key": "cmd+k cmd+e",
        "command": "-keybindings.editor.defineWhenExpression",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "cmd+k cmd+e",
        "command": "workbench.action.focusActiveEditorGroup"
    },
    {
        "key": "cmd+k cmd+o",
        "command": "outline.focus"
    },
    {
        "key": "cmd+k cmd+t",
        "command": "-workbench.action.selectTheme"
    },
    {
        "key": "cmd+k cmd+t",
        "command": "terminal.focus"
    },
    {
        "key": "cmd+backspace",
        "command": "-notification.clear",
        "when": "notificationFocus"
    },
    {
        "key": "cmd+k cmd+h",
        "command": "clangd.typeHierarchyView.focus"
    },
    {
        "key": "cmd+k cmd+p",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
        "when": "!activeEditorGroupEmpty"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.switchWindow"
    },
    {
        "key": "ctrl+d",
        "command": "-deleteRight",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+d",
        "command": "deleteWordRight",
        "when": "textInputFocus && !editorReadonly && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+backspace",
        "command": "-extension.vim_ctrl+backspace",
        "when": "editorTextFocus && vim.active && vim.use<C-BS> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+backspace",
        "command": "-deleteLeft",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+backspace",
        "command": "deleteRight",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+o",
        "command": "-lineBreakInsert",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+o",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && vim.mode == 'Insert' && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+e",
        "command": "hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus && vim.mode == 'Insert'"
    },
    {
        "key": "cmd+k cmd+k",
        "command": "editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "cmd+k cmd+k",
        "command": "editor.action.showHover",
        "when": "editorTextFocus && vim.mode == 'Normal'"
    },
    {
        "key": "shift+k",
        "command": "editor.action.showHover",
        "when": "editorTextFocus && vim.mode == 'Normal'"
    },
    {
        "key": "g r",
        "command": "editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor && vim.mode == 'Normal'"
    },
    {
        "key": "g d",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor && vim.mode != 'Insert' && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+enter",
        "command": "-github.copilot.generate",
        "when": "editorTextFocus && github.copilot.activated && !inInteractiveInput && !interactiveEditorFocused"
    },
    {
        "key": "tab",
        "command": "-editor.emmet.action.expandAbbreviation",
        "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "tab",
        "command": "-editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
    },
    {
        "key": "tab",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible && vim.mode == 'Insert'"
    },
    {
        "key": "tab",
        "command": "-acceptSelectedSuggestion",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "tab",
        "command": "-whichkey.triggerKey",
        "when": "whichkeyVisible"
    },
    {
        "key": "tab",
        "command": "-insertBestCompletion",
        "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "tab",
        "command": "-insertNextSuggestion",
        "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "tab",
        "command": "-insertSnippet",
        "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
    },
    {
        "key": "cmd+enter",
        "command": "-editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+enter",
        "command": "-notebook.cell.insertCodeCellBelow",
        "when": "notebookCellListFocused && !inputFocus"
    },
    {
        "key": "cmd+enter",
        "command": "editor.action.inlineSuggest.commit",
        "when": "editorTextFocus && vim.mode == 'Insert'"
    },
    {
        "key": "cmd+l",
        "command": "-expandLineSelection",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+l",
        "command": "editor.action.inlineSuggest.acceptNextWord",
        "when": "inlineSuggestionVisible && !editorReadonly && editorTextFocus && vim.mode == 'Insert'"
    },
    {
        "key": "cmd+j",
        "command": "workbench.action.togglePanel",
        "when": "vim.mode == 'Normal'"
    },
    {
        "key": "cmd+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "\\",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "g l",
        "command": "editor.action.marker.next",
        "when": " editorFocus && vim.mode == 'Normal'"
    },
    {
        "key": "tab",
        "command": "-tab",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "ctrl+h",
        "command": "-extension.vim_ctrl+h",
        "when": "editorTextFocus && vim.active && vim.use<C-h> && !inDebugRepl"
    },
    {
        "key": "ctrl+h",
        "command": "-deleteLeft",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+l",
        "command": "editor.action.indentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+h",
        "command": "editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly"
    }
]